DROP TABLE IF EXISTS lecture;

DROP TABLE IF EXISTS room;

DROP TABLE IF EXISTS teacher;

-- Nauczyciele

CREATE TABLE teacher
(
    email VARCHAR(100) PRIMARY KEY,
    name  VARCHAR(150),
    title VARCHAR(15)
);

INSERT INTO teacher (email, name, title)
VALUES ('knowak@db.pl', 'Kasia Nowak', 'mgr inż.'),
       ('jkowalski@db.pl', 'Jan Kowalski', 'mgr'),
       ('ekot@db.pl', 'Emilia Kot', 'prof. nadzw.'),
       ('emazur@db.pl', 'Ewa Mazur', NULL);

-- Sale

CREATE TABLE room
(
    id              INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    room_number     VARCHAR(4),
    building        VARCHAR(20),
    is_lab          BOOLEAN,
    number_of_seats INTEGER
);

INSERT INTO room (room_number, building, is_lab, number_of_seats)
VALUES ('1', 'A', TRUE, 10),
       ('2B', 'A', FALSE, 50),
       ('3', 'B', FALSE, 30),
       ('28', 'C', true, 25),
       ('31', 'B', FALSE, 30),
       ('2', 'C', true, 10),
       ('3', 'C', FALSE, 80),
       ('3', 'A', FALSE, 80),
       ('4', 'C', FALSE, 30);

-- Zajęcia

CREATE TABLE lecture
(
    id            INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    teacher_email VARCHAR(100) REFERENCES teacher (email),
    room_id       INTEGER REFERENCES room (id),
    start_time    TIMESTAMP,
    end_time      TIMESTAMP,
    name          VARCHAR(255)
);

INSERT INTO lecture (teacher_email, room_id, start_time, end_time, name)
VALUES ('knowak@db.pl', 1, '2020-10-26 11:30', '2020-10-26 12:30', 'SQL'),
       ('jkowalski@db.pl', 2, '2020-10-27 11:30', '2020-10-27 13:30', 'Java'),
       ('ekot@db.pl', 3, '2020-10-27 14:00', '2020-10-27 16:30', 'CSS'),
       ('jkowalski@db.pl', 4, '2020-10-29 07:00', '2020-10-29 11:00', 'HTML'),
       ('knowak@db.pl', 1, '2020-10-26 11:00', '2020-10-26 11:30', 'Testy');

select *
from lecture;

select *
from teacher;

select *
from room;

-- Ad1.1
update teacher
set title= 'dr'
where name = 'Kasia Nowak';

--Ad1.2
update lecture
set name = 'SQL- zajecia odwołane'
where name = 'SQL';

--Ad1.3

insert into room (room_number, building, is_lab, number_of_seats)
values ('10D', 'B', true, 20);

update lecture
set room_id = (select id
               from room
               where room_number = '10D'
                 and building = 'B')
where name = 'Java';

--Ad1.4

update room
set number_of_seats = (number_of_seats / 2);


--Ad2

SELECT lecture.name,
       room.room_number,
       teacher.name,
       lecture.start_time,
       extract(epoch from (lecture.end_time - lecture.start_time)) / 60 AS duration
from lecture
         join teacher
              on lecture.teacher_email = teacher.email
         join room
              on lecture.room_id = room.id
where lecture.start_time between '2020-10-01' and '2020-10-31'
order by lecture.start_time;


--Z cwiczen
select teacher.name,
       teacher.title,
       room.room_number,
       lecture.start_time,
       lecture.name
from lecture
join teacher on lecture.teacher_email = teacher.email
join room on lecture.room_id = room.id
where room.room_number in ('1', '3') and lecture.name != 'Testy';


insert into room (room_number, building, is_lab, number_of_seats)
values ('10B', 'C', false, 50);

SELECT distinct l.room_id
from lecture l
         right join room r on r.id = l.room_id
where room_id is null;


select * from room
order by room_number
limit 2;

select * from (select * from room order by room_number) as sorted
limit 2;

select r.room_number, r.building, r.number_of_seats, l.name
from room r
left join lecture l on r.id = l.room_id
where l.room_id is null;

select r.room_number, r.building, r.number_of_seats, l.name
from room r
         cross join lecture l;

select r.building, count(r.room_number)
from room r
group by r.building
order by count(*) DESC limit 1;




------------------------------------------------------
create table Paragon(
    NrParagonu integer generated always as identity primary key,
    DataZakupu timestamp,
    NumerSprzedawcy integer references Sprzedawcy (id)
);

create table Sprzedawcy(
    id integer generated always as identity primary key ,
    imie varchar(20),
    nazwisko varchar(30)
);

create table ZawartoscParagonu(
    EAN smallint generated by default as identity primary key,
    Paragon integer references Paragon (NrParagonu),
    Ilosc integer
);


create table Produkty(
    EAN smallint references ZawartoscParagonu (EAN),
    Nazwa varchar(100),
    Cena real,
    Opis text
);


insert into Sprzedawcy(imie, nazwisko)
values ('Marcin', 'Nowak'),
       ('Jan', 'Kowalski'),
       ('Jessica', 'Brajanusz'),
       ('Brajan', 'Dajong');


select * from Sprzedawcy;

insert into Paragon(datazakupu, numersprzedawcy)
values ('2020-10-26 11:30', 1),
       ('2020-10-26 12:30', 1),
       ('2020-10-26 13:30', 1),
       ('2020-10-26 14:30', 2),
       ('2020-10-27 11:30', 3),
       ('2020-10-27 14:30', 4);

select * from Paragon;

insert into ZawartoscParagonu(Paragon, Ilosc)
values (19, 3),
       (20, 1),
       (21, 7),
       (22, 2),
       (23, 4),
       (24, 5);

select * from ZawartoscParagonu;

insert into Produkty(ean, nazwa, cena, opis)
values (1, 'Specjal', 2.30, 'Najlepsze piwko'),
       (2, 'Chardonayy', 15.00, 'Wino białe'),
       (3, 'Chleb', 2.30, 'Chleb wiejski'),
       (4, 'Berlinki', 5.40, 'parówki'),
       (5, 'Pepsi', 7.41, 'Czarne złoto'),
       (6, 'Apap', 5.10, 'paracetamol');

select * from Produkty;

select s.imie, s.nazwisko, count(*) as liczbaParagonow
from sprzedawcy s
join paragon p on s.id = p.NumerSprzedawcy
group by s.imie, s.nazwisko
order by count(*) desc;

select ZP.Paragon as nrParagonu, sum(ZP.Ilosc * P2.Cena) as wartosc, ZP.Ilosc
from Produkty P2
join ZawartoscParagonu ZP on P2.EAN = ZP.EAN
group by ZP.Ilosc, ZP.Paragon
having zp.ilosc >=2;

select p.ean, p.nazwa, p.cena, p.opis, zp.ean, zp.paragon, zp.ilosc
from Produkty p
join ZawartoscParagonu ZP on ZP.EAN = p.EAN
group by p.nazwa, p.ean, p.cena, p.opis, zp.ean, zp.paragon, zp.ilosc
having ZP.ilosc >= 2;
